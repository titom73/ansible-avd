{# Overlay Controller Configuration #}
## Ansible Generated ##

### {{ inventory_hostname }} ###
{# Set Overlay Controller Variables #}
{% set switch = namespace() %}
{% set switch.platform = overlay_controller.platform %}
{% set switch.mgmt_ip = overlay_controller.nodes[inventory_hostname].mgmt_ip %}
{% set switch.spanning_tree_mode = "none" %}
{# Set switch.underlay_routing_protocol using external logic template #}
{% include 'logic/switch-underlay-routing-protocol.j2' %}
{# Set switch.overlay_routing_protocol using external logic template #}
{% include 'logic/switch-overlay-routing-protocol.j2' %}
{% for node in overlay_controller.nodes | arista.avd.natural_sort %}
{%     if node == inventory_hostname %}
{%         set switch.id = overlay_controller.nodes[node].id %}
{# Get local RR/RS interface to configure #}
{%         if overlay_controller.nodes[ node ].uplink_to_remote_switches is defined %}
{%             set switch.uplink_to_remote_switches = overlay_controller.nodes[node].uplink_to_remote_switches %}
{%         else %}
{%             set switch.uplink_to_remote_switches = overlay_controller.defaults.uplink_to_remote_switches %}
{%         endif %}
{# Get remote switch interface to configure #}
{%         if overlay_controller.nodes[node].remote_switches_interfaces is defined %}
{%             set switch.remote_switches_interfaces = overlay_controller.nodes[node].remote_switches_interfaces %}
{%         endif %}
{# Get remote hostname #}
{%         if overlay_controller.nodes[node].remote_switches is defined %}
{%             set switch.remote_switches = overlay_controller.nodes[node].remote_switches %}
{%         else %}
{%             set switch.remote_switches = overlay_controller.defaults.remote_switches %}
{%         endif %}
{# Get ASN of remote devices where RS/RR are connected #}
{%         set switch.remote_switches_asn = [] %}
{%         for remote_switch in switch.remote_switches %}
{%             set remote_switch_vars = hostvars[ remote_switch ] %}
{%             if remote_switch_vars.type == 'l3leaf' %}
{%                 for l3leaf_node_group in remote_switch_vars.l3leaf.node_groups | arista.avd.natural_sort %}
{%                     if remote_switch in remote_switch_vars.l3leaf.node_groups[l3leaf_node_group].nodes | arista.avd.natural_sort %}
{%                         do switch.remote_switches_asn.append( remote_switch_vars.l3leaf.node_groups[l3leaf_node_group].nodes[remote_switch].bgp_as | arista.avd.default( remote_switch_vars.l3leaf.node_groups[l3leaf_node_group].bgp_as , remote_switch_vars.l3leaf.defaults.bgp_as) ) %}
{%                         break %}
{%                     endif %}
{%                 endfor %}
{%             elif remote_switch_vars.type == 'spine' %}
{%                 do switch.remote_switches_asn.append( remote_switch_vars.spine.bgp_as ) %}
{%             elif remote_switch_vars.type == 'super-spine' %}
{%                 do switch.remote_switches_asn.append( remote_switch_vars.super_spine.bgp_as ) %}
{%             elif remote_switch_vars.type == 'overlay-controller' %}
{%                 do switch.remote_switches_asn.append( remote_switch_vars.overlay_controller.nodes[some_switch].bgp_as | arista.avd.default(remote_switch_vars.overlay_controller.defaults.bgp_as)) %}
{%             endif %}
{%         endfor %}
{%         if bgp_as is arista.avd.defined and switch.overlay_routing_protocol == 'ibgp' %}
{%             set switch.bgp_as = bgp_as %}
{%         else %}
{%             set switch.bgp_as = overlay_controller.nodes[node].bgp_as | arista.avd.default(
                                   overlay_controller.defaults.bgp_as) %}
{%         endif %}
{%         set switch.router_id = overlay_controller_loopback_network_summary | ipaddr('network') | ipmath(switch.id) %}
{%         set switch.bgp_defaults = overlay_controller_bgp_defaults | arista.avd.default([]) %}
{# Logic for EVPN Role for Overlay BGP Peerings #}
{# For super-spine the default value is none #}
{%         set switch.evpn_role = overlay_controller.nodes[inventory_hostname].evpn_role | arista.avd.default(
                                  overlay_controller.defaults.evpn_role,
                                  'none') %}
{%         set switch.raw_evpn_route_servers = overlay_controller.nodes[inventory_hostname].evpn_route_servers | arista.avd.default(
                                               overlay_controller.defaults.evpn_route_servers,
                                               []) %}
{%     endif %}
{% endfor %}
{# Set switch.evpn_route_servers using external logic template #}
{% include 'logic/switch-evpn-route-servers.j2' %}
{# Set switch.evpn_route_clients using external logic template #}
{% include 'logic/switch-evpn-route-clients.j2' %}

### Overlay Controller Info ###
switch_platform: {{ switch.platform }}
switch_mgmt_ip: {{ switch.mgmt_ip }}
switch_bgp_as: {{ switch.bgp_as }}
switch_router_id: {{ switch.router_id }}
switch_evpn_role: {{ switch.evpn_role }}
switch_evpn_route_servers: {{ switch.evpn_route_servers | arista.avd.natural_sort }}
switch_evpn_route_clients: {{ switch.evpn_route_clients | arista.avd.natural_sort }}

{# routing protocol model multi-agent needed for EVPN address family #}
service_routing_protocols_model: multi-agent
ip_routing: true

{# Hardware Counter #}
### Hardware Counters
hardware_counters:
{% include 'base/hardware-counters.j2' %}

{# Daemon TerminAttr #}
### Daemon TerminAttr
daemon_terminattr:
{% include 'base/daemon-terminattr.j2' %}

{# vlan allocation policy #}
vlan_internal_order:
{% include 'base/vlan-internal-order.j2' %}

{# event monitor #}
### Event Monitor ###
event_monitor:
{% include 'base/event-monitor.j2' %}

{# event handler #}
### Event Handler ###
event_handlers:
{% include 'base/event-handler.j2' %}

{# load interval #}
### Load Interval ###
load_interval:
{% include 'base/load-interval.j2' %}

{# queue monitor length #}
### Queue Monitor Lenght ###
queue_monitor_length:
{% include 'base/queue-monitor-length.j2' %}

{# logging #}
### Logging ###
logging:
{% include 'base/logging.j2' %}

{# name servers #}
### Name Servers ###
name_server:
{% include 'base/name-servers.j2' %}

{# NTP servers #}
### NTP Servers ###
ntp_server:
{% include 'base/ntp-servers.j2' %}

{# redundancy #}
### Redundancy ###
redundancy:
{% include 'base/redundancy.j2' %}

{# spanning-tree #}
### Spanning-tree ###
spanning_tree:
{% include 'base/spanning-tree.j2' %}

{# unsupported transceiver #}
{% include 'base/unsupported-transeiver.j2' %}

{# aaa authorization #}
### AAA authorization ###
aaa_authorization:
{% include 'base/aaa-authorization.j2' %}

{# local users #}
### local users ###
local_users:
{% include 'base/local-users.j2' %}

{# clock timezone #}
### Clock Timezone ###
clock:
{% include 'base/clock-timezone.j2' %}


{# VRFs #}
### VRFs ###
vrfs:
{% include 'base/mgmt-vrf.j2' %}

{# bfd multihop #}
### bfd multihop ###
bfd_multihop:
{% include 'base/bfd-multihop.j2' %}

{# Ethernet Interfaces #}
### Ethernet Interfaces ###
ethernet_interfaces:
{% include 'fabric/interfaces/overlay-controller-p2p-interfaces.j2' %}

{# loopback interfaces #}
### Loopback Interfaces ###
loopback_interfaces:
{# overlay peering interface #}
{% include 'fabric/interfaces/overlay-controller-loopback.j2'%}
{# intentional blank line #}

{# Management Interfaces #}
### Management Interfaces ###
management_interfaces:
{% include 'base/mgmt-interface.j2' %}

{# TCAM Profiles #}
### TCAM Profiles ###
tcam_profile:
{% include 'base/tcam-profile.j2' %}

{# Platform #}
### Platform ###
platform:
{% include 'base/platform.j2' %}

{# mac address-table #}
### MAC address table ###
mac_address_table:
{% include 'base/mac-address-table.j2' %}

{# static_routes #}
### static routes ###
static_routes:
{% include 'routing/static-routes.j2' %}

{# prefix_lists #}
### prefix-lists ###
prefix_lists:
{% include 'fabric/bgp_base/overlay-controller-prefix-lists.j2' %}

{# route maps #}
### route-maps ###
route_maps:
{% include 'fabric/bgp_base/route-maps.j2' %}
{% include 'fabric/bgp_overlay/switch-route-maps-evpn.j2' %}

{# ##### BGP Configurartion ##### #}
### Routing - BGP ###
router_bgp:
{# underlay and overlay #}
{% include 'fabric/bgp_base/switch-router-bgp-base.j2' %}
  peer_groups:
{% include 'fabric/bgp_base/overlay-controller-router-bgp-peer-groups.j2' %}
{% include 'fabric/bgp_overlay/switch-router-bgp-peer-groups-evpn.j2' %}
  neighbors:
{% include 'fabric/bgp_base/overlay-controller-router-bgp-neighbors.j2' %}
{% include 'fabric/bgp_overlay/switch-router-bgp-neighbors-evpn.j2' %}
  redistribute_routes:
{% include 'fabric/ebgp_underlay/overlay-controller-router-bgp-redistribute-routes.j2' %}
  address_family_evpn:
{% include 'fabric/bgp_overlay/switch-router-bgp-address-family-evpn.j2' %}
  address_family_ipv4:
{% include 'fabric/ebgp_underlay/overlay-controller-router-bgp-address-family-ipv4.j2' %}
  address_family_rtc:
{% include 'fabric/bgp_overlay/switch-router-bgp-address-family-rtc.j2' %}

{# OSPF Configurartion #}
### Routing - OSPF ###
router_ospf:
{# underlay #}
{% include 'fabric/ospf_underlay/router-ospf.j2' %}

{# OSPF Configurartion #}
### Routing - ISIS ###
router_isis:
{# underlay #}
{% include 'fabric/isis_underlay/router-isis.j2' %}

{# queue monitor streaming #}
### Queue Monitor Streaming ###
queue_monitor_streaming:
{% include 'base/queue-monitor-streaming.j2' %}

{# management api http #}
### Management API http ###
management_api_http:
{% include 'base/management-api-http.j2' %}