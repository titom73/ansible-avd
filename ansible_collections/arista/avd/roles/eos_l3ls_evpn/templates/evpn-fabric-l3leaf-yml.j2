{# leaf switch configuration  #}
## Ansible Generated ##

### {{ inventory_hostname }} ###

{# set leaf variables #}
{% set switch = namespace() %}
{% set leaf = namespace() %}
{# Set switch.underlay_routing_protocol using external logic template #}
{% include 'logic/switch-underlay-routing-protocol.j2' %}
{# Set switch.overlay_routing_protocol using external logic template #}
{% include 'logic/switch-overlay-routing-protocol.j2' %}
{% for l3leaf_node_group in l3leaf.node_groups | arista.avd.natural_sort %}
{%     for node in l3leaf.node_groups[l3leaf_node_group].nodes | arista.avd.natural_sort %}
{%         if node == inventory_hostname %}
{%             set leaf.group = l3leaf_node_group %}
{%             set leaf.id = l3leaf.node_groups[l3leaf_node_group].nodes[node].id %}
{%             set switch.mgmt_ip = l3leaf.node_groups[l3leaf_node_group].nodes[node].mgmt_ip %}
{%             set leaf.spine_interfaces = l3leaf.node_groups[l3leaf_node_group].nodes[node].spine_interfaces %}
{%             if l3leaf.node_groups[l3leaf_node_group].filter.tenants is defined %}
{%                 set leaf.filter_tenants = l3leaf.node_groups[l3leaf_node_group].filter.tenants %}
{%             elif l3leaf.defaults.filter.tenants is defined %}
{%                 set leaf.filter_tenants = l3leaf.defaults.filter.tenants %}
{%             else %}
{%                 set leaf.filter_tenants = [ 'all' ] %}
{%             endif %}
{%             if l3leaf.node_groups[l3leaf_node_group].igmp_snooping_enabled is defined %}
{%                 set leaf.igmp_snooping_enabled = l3leaf.node_groups[l3leaf_node_group].igmp_snooping_enabled %}
{%             elif l3leaf.defaults.igmp_snooping_enabled is defined %}
{%                 set leaf.igmp_snooping_enabled = l3leaf.defaults.igmp_snooping_enabled %}
{%             else %}
{%                 set leaf.igmp_snooping_enabled = default_igmp_snooping_enabled %}
{%             endif %}
{%             if l3leaf.node_groups[l3leaf_node_group].filter.tags is defined %}
{%                 set leaf.filter_tags = l3leaf.node_groups[l3leaf_node_group].filter.tags %}
{%             elif l3leaf.defaults.filter.tags is defined %}
{%                 set leaf.filter_tags = l3leaf.defaults.filter.tags %}
{%             else %}
{%                 set leaf.filter_tags = [ 'all' ] %}
{%             endif %}
{%             if l3leaf.node_groups[l3leaf_node_group].spines is defined %}
{%                 set leaf.spines = l3leaf.node_groups[l3leaf_node_group].spines %}
{%             else %}
{%                 set leaf.spines = l3leaf.defaults.spines %}
{%             endif %}
{%             if l3leaf.node_groups[l3leaf_node_group].uplink_to_spine_interfaces is defined %}
{%                 set leaf.uplink_to_spine_interfaces = l3leaf.node_groups[l3leaf_node_group].uplink_to_spine_interfaces %}
{%             else %}
{%                 set leaf.uplink_to_spine_interfaces = l3leaf.defaults.uplink_to_spine_interfaces %}
{%             endif %}
{%             if l3leaf.node_groups[l3leaf_node_group].p2p_link_interface_speed is defined %}
{%                 set leaf.p2p_link_interface_speed = l3leaf.node_groups[l3leaf_node_group].p2p_link_interface_speed %}
{%             elif l3leaf.defaults.p2p_link_interface_speed is defined %}
{%                 set leaf.p2p_link_interface_speed = l3leaf.defaults.p2p_link_interface_speed %}
{%             endif %}
{%             if l3leaf.node_groups[l3leaf_node_group].platform is defined %}
{%                 set switch.platform = l3leaf.node_groups[l3leaf_node_group].platform %}
{%             else %}
{%                 set switch.platform = l3leaf.defaults.platform %}
{%             endif %}
{%             if bgp_as is arista.avd.defined and switch.overlay_routing_protocol == 'ibgp' %}
{%                  set switch.bgp_as = bgp_as %}
{%             elif l3leaf.node_groups[l3leaf_node_group].nodes[node].bgp_as is defined %}
{%                 set switch.bgp_as = l3leaf.node_groups[l3leaf_node_group].nodes[node].bgp_as %}
{%             elif l3leaf.node_groups[l3leaf_node_group].bgp_as is defined %}
{%                 set switch.bgp_as = l3leaf.node_groups[l3leaf_node_group].bgp_as %}
{%             elif l3leaf.defaults.bgp_as is defined %}
{%                 set switch.bgp_as = l3leaf.defaults.bgp_as %}
{%             endif %}
{%             set switch.router_id = overlay_loopback_network_summary | ipaddr('network') | ipmath(leaf.id + spine.nodes | length) %}
{%             set switch.bgp_defaults = leaf_bgp_defaults | arista.avd.default([]) %}
{%             if l3leaf.node_groups[l3leaf_node_group].virtual_router_mac_address is defined %}
{%                 set leaf.virtual_router_mac_address = l3leaf.node_groups[l3leaf_node_group].virtual_router_mac_address %}
{%             else %}
{%                 set leaf.virtual_router_mac_address = l3leaf.defaults.virtual_router_mac_address %}
{%             endif %}
{%             if l3leaf.node_groups[l3leaf_node_group].spanning_tree_mode is defined %}
{%                 set switch.spanning_tree_mode = l3leaf.node_groups[l3leaf_node_group].spanning_tree_mode %}
{%             else %}
{%                 set switch.spanning_tree_mode = l3leaf.defaults.spanning_tree_mode %}
{%             endif %}
{%             if l3leaf.node_groups[l3leaf_node_group].spanning_tree_priority is defined %}
{%                 set switch.spanning_tree_priority = l3leaf.node_groups[l3leaf_node_group].spanning_tree_priority %}
{%             else %}
{%                 set switch.spanning_tree_priority = l3leaf.defaults.spanning_tree_priority %}
{%             endif %}
{%             if l3leaf.node_groups[l3leaf_node_group].mlag is defined %}
{%                 set switch.mlag = l3leaf.node_groups[l3leaf_node_group].mlag %}
{%             else %}
{%                 set switch.mlag = l3leaf.defaults.mlag | default(true) %}
{%             endif %}
{%             set leaf.mlag_ibgp_origin_incomplete = l3leaf.node_groups[l3leaf_node_group].mlag_ibgp_origin_incomplete | arista.avd.default(l3leaf.defaults.mlag_ibgp_origin_incomplete, true) %}
{%             if loop.length == 2 and switch.mlag == true %}
{%                 set leaf.mlag = true %}
{%                 set leaf.mlag_group = l3leaf_node_group %}
{%                 if l3leaf.node_groups[l3leaf_node_group].mlag_dual_primary_detection is defined %}
{%                     set leaf.mlag_dual_primary_detection = l3leaf.node_groups[l3leaf_node_group].mlag_dual_primary_detection %}
{%                 elif l3leaf.defaults.mlag_dual_primary_detection is defined %}
{%                     set leaf.mlag_dual_primary_detection = l3leaf.defaults.mlag_dual_primary_detection %}
{%                 else %}
{%                     set leaf.mlag_dual_primary_detection = false %}
{%                 endif %}
{%                 if l3leaf.node_groups[l3leaf_node_group].mlag_interfaces is defined %}
{%                     set leaf.mlag_interfaces = l3leaf.node_groups[l3leaf_node_group].mlag_interfaces %}
{%                 else %}
{%                     set leaf.mlag_interfaces = l3leaf.defaults.mlag_interfaces %}
{%                 endif %}
{%                 if loop.index == 1 %}
{%                     set leaf.mlag_role = "primary" %}
{%                     set leaf.mlag_peer = loop.nextitem %}
{%                     set leaf.mlag_ip = (( l3leaf.node_groups[l3leaf_node_group].nodes[node].id -1 ) * 2 ) %}
{%                     set leaf.mlag_peer_ip = ((( l3leaf.node_groups[l3leaf_node_group].nodes[node].id -1 ) * 2 ) + 1 ) %}
{%                     set leaf.mlag_peer_id = l3leaf.node_groups[l3leaf_node_group].nodes[loop.nextitem].id %}
{%                     set leaf.mlag_peer_mgmt_ip = l3leaf.node_groups[l3leaf_node_group].nodes[loop.nextitem].mgmt_ip | ipaddr('address') %}
{%                 elif loop.index == 2 %}
{%                     set leaf.mlag_role = "secondary" %}
{%                     set leaf.mlag_peer = loop.previtem %}
{%                     set leaf.mlag_ip = ((( l3leaf.node_groups[l3leaf_node_group].nodes[loop.previtem].id -1 ) * 2 ) +1 ) %}
{%                     set leaf.mlag_peer_ip = (( l3leaf.node_groups[l3leaf_node_group].nodes[loop.previtem].id -1 ) * 2 )  %}
{%                     set leaf.mlag_peer_id = l3leaf.node_groups[l3leaf_node_group].nodes[loop.previtem].id  %}
{%                     set leaf.mlag_peer_mgmt_ip = l3leaf.node_groups[l3leaf_node_group].nodes[loop.previtem].mgmt_ip | ipaddr('address')  %}
{%                 endif %}
{%             else %}
{%                 set leaf.mlag = false %}
{%             endif %}
{%             if l3leaf.node_groups[l3leaf_node_group].evpn_services_l2_only is defined %}
{%                 set leaf.evpn_services_l2_only = l3leaf.node_groups[l3leaf_node_group].evpn_services_l2_only %}
{%             else %}
{%                 set leaf.evpn_services_l2_only = l3leaf.defaults.evpn_services_l2_only | default(false) %}
{%             endif %}
{#             Logic for EVPN Role for Overlay BGP Peerings #}
{#             For l3leaf the default value is client #}
{%             set switch.evpn_role = l3leaf.node_groups[l3leaf_node_group].evpn_role | arista.avd.default(
                                      l3leaf.defaults.evpn_role,
                                      'client') %}
{#             For l3leaf the default value for EVPN Route Servers is content of the spines variable set above. For safety we fall back to [] #}
{%             set switch.raw_evpn_route_servers = l3leaf.node_groups[l3leaf_node_group].evpn_route_servers | arista.avd.default(
                                      l3leaf.defaults.evpn_route_servers,
                                      leaf.spines,
                                      []) %}
{%         endif %}
{%     endfor %}
{% endfor %}
{# Set switch.evpn_route_servers using external logic template #}
{% include 'logic/switch-evpn-route-servers.j2' %}
{# Set switch.evpn_route_clients using external logic template #}
{% include 'logic/switch-evpn-route-clients.j2' %}
{# set leaf allowed vrfs, svis and vlans #}
{% set leaf.vrfs = []  %}
{% set leaf.svis = []  %}
{% set leaf.vlans = []  %}
{% for tenant in tenants | arista.avd.natural_sort if tenant in leaf.filter_tenants or "all" in leaf.filter_tenants %}
{%     if tenants[tenant].vrfs is defined %}
{%         for vrf in tenants[tenant].vrfs | arista.avd.natural_sort %}
{%             for svi in tenants[tenant].vrfs[vrf].svis | arista.avd.natural_sort %}
{%                 for svi_tag in tenants[tenant].vrfs[vrf].svis[svi].tags %}
{%                     if svi_tag in leaf.filter_tags or svi_tag == leaf.group or "all" in leaf.filter_tags %}
{%                         do leaf.vrfs.append( vrf ) %}
{%                         do leaf.svis.append( svi | int) %}
{%                         do leaf.vlans.append( svi | int) %}
{%                         break %}
{%                     endif %}
{%                 endfor %}
{%             endfor %}
{%         endfor %}
{%     endif %}
{%     if tenants[tenant].l2vlans is defined %}
{%         for l2vlan in tenants[tenant].l2vlans | arista.avd.natural_sort %}
{%             for vlan_tag in tenants[tenant].l2vlans[l2vlan].tags %}
{%                 if vlan_tag in leaf.filter_tags or vlan_tag == leaf.group or "all" in leaf.filter_tags %}
{%                     do leaf.vlans.append( l2vlan | int) %}
{%                     break %}
{%                 endif %}
{%             endfor %}
{%         endfor %}
{%     endif %}
{% endfor %}
{% set leaf.vrfs = leaf.vrfs | unique  %}
{# Setting tenant static routes #}
{% set leaf.static_routes = [] %}
{% for tenant in tenants | arista.avd.natural_sort if tenant in leaf.filter_tenants or "all" in leaf.filter_tenants %}
{%     if tenants[tenant].vrfs is arista.avd.defined %}
{%         for vrf in tenants[tenant].vrfs if vrf in leaf.vrfs %}
{%             if tenants[tenant].vrfs[vrf].static_routes is arista.avd.defined %}
{%                 for static_route in tenants[tenant].vrfs[vrf].static_routes %}
{%                     if static_route.nodes is not arista.avd.defined or inventory_hostname in static_route.nodes %}
{%                         set entry = static_route %}
{%                         do entry.update( {'vrf':vrf} )%}
{%                         if entry.nodes is arista.avd.defined %}
{%                             do entry.pop( 'nodes' ) %}
{%                         endif %}
{%                         do leaf.static_routes.append( entry )%}
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}
{% endfor %}
{# Checking for BGP peers inside tenant VRFs #}
{% set leaf.has_tenant_bgp_peers = false %}
{% for tenant in tenants | arista.avd.natural_sort if tenant in leaf.filter_tenants or "all" in leaf.filter_tenants %}
{%     if tenants[tenant].vrfs is arista.avd.defined %}
{%         for vrf in tenants[tenant].vrfs if vrf in leaf.vrfs %}
{%             if tenants[tenant].vrfs[vrf].bgp_peers is arista.avd.defined %}
{%                 for bgp_peer in tenants[tenant].vrfs[vrf].bgp_peers %}
{%                     if tenants[tenant].vrfs[vrf].bgp_peers[bgp_peer].nodes is arista.avd.defined %}
{%                         if inventory_hostname in tenants[tenant].vrfs[vrf].bgp_peers[bgp_peer].nodes %}
{%                             set leaf.has_tenant_bgp_peers = true %}
{%                             break %}
{%                         endif %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}
{% endfor %}
{# Setting evpn_rd_admin_subfield #}
{% set leaf.evpn_rd_admin_subfield = overlay_loopback_network_summary | ipaddr('network') | ipmath(leaf.id + spine.nodes | length) %}
{% if evpn_rd_type is defined and evpn_rd_type is not none %}
{%     if evpn_rd_type.admin_subfield is defined and evpn_rd_type.admin_subfield is not none %}
{%         if evpn_rd_type.admin_subfield == "vtep_loopback" %}
{%             if leaf.mlag == true and leaf.mlag_role == "primary" %}
{%                 set leaf.evpn_rd_admin_subfield = vtep_loopback_network_summary | ipaddr('network') | ipmath(leaf.id + spine.nodes | length) %}
{%             elif leaf.mlag == true and leaf.mlag_role == "secondary" %}
{%                 set leaf.evpn_rd_admin_subfield = vtep_loopback_network_summary | ipaddr('network') | ipmath(leaf.mlag_peer_id + spine.nodes | length) %}
{%             else %}
{%                 set leaf.evpn_rd_admin_subfield = vtep_loopback_network_summary | ipaddr('network') | ipmath(leaf.id + spine.nodes | length) %}
{%             endif %}
{%         elif evpn_rd_type.admin_subfield == "leaf_asn" %}
{%             set leaf.evpn_rd_admin_subfield = switch.bgp_as %}
{%         elif evpn_rd_type.admin_subfield == "spine_asn" %}
{%             set leaf.evpn_rd_admin_subfield = spine.bgp_as %}
{%         elif evpn_rd_type.admin_subfield | ipaddr %}
{%             set leaf.evpn_rd_admin_subfield = evpn_rd_type.admin_subfield %}
{%         elif evpn_rd_type.admin_subfield is number and evpn_rd_type.admin_subfield >= 0 and evpn_rd_type.admin_subfield <= 4294967295 %}
{%             set leaf.evpn_rd_admin_subfield = evpn_rd_type.admin_subfield %}
{%         endif %}
{%     endif %}
{% endif %}
{# Setting evpn_rt_admin_subfield #}
{% set leaf.evpn_rt_admin_subfield = false %}
{% if evpn_rt_type is defined and evpn_rt_type is not none %}
{%     if evpn_rt_type.admin_subfield is defined and evpn_rt_type.admin_subfield is not none %}
{%         if evpn_rt_type.admin_subfield == "leaf_asn" %}
{%             set leaf.evpn_rt_admin_subfield = switch.bgp_as %}
{%         elif evpn_rt_type.admin_subfield == "spine_asn" %}
{%             set leaf.evpn_rt_admin_subfield = spine.bgp_as %}
{%         elif evpn_rt_type.admin_subfield is number and evpn_rt_type.admin_subfield >= 0 and evpn_rt_type.admin_subfield <= 4294967295 %}
{%             set leaf.evpn_rt_admin_subfield = evpn_rt_type.admin_subfield %}
{%         endif %}
{%     endif %}
{% endif %}
{# Set switch.l3_edge_* variables using external logic template #}
{% include 'logic/switch-l3-edge.j2' %}

### Leaf Info ###
l3leaf_node_group: {{ leaf.group }}
switch_platform: {{ switch.platform }}
switch_bgp_as: {{ switch.bgp_as }}
leaf_id: {{ leaf.id }}
switch_mgmt_ip: {{ switch.mgmt_ip }}
leaf_evpn_services_l2_only: {{ leaf.evpn_services_l2_only }}
switch_router_id: {{ switch.router_id }}
switch_evpn_role: {{ switch.evpn_role }}
switch_evpn_route_servers: {{ switch.evpn_route_servers | arista.avd.natural_sort }}
switch_evpn_route_clients: {{ switch.evpn_route_clients | arista.avd.natural_sort }}
leaf_filter_tenants: {{ leaf.filter_tenants }}
leaf_filter_tags: {{ leaf.filter_tags }}
leaf_allowed_vrfs: {{ leaf.vrfs }}
leaf_allowed_svis: {{ leaf.svis }}
leaf_allowed_vlans: {{ leaf.vlans }}
leaf_mlag: {{ leaf.mlag }}
{% if leaf.mlag == true %}
leaf_mlag_group: {{ leaf.mlag_group }}
leaf_mlag_role: {{ leaf.mlag_role }}
leaf_mlag_peer: {{ leaf.mlag_peer }}
leaf_mlag_ip: {{ leaf.mlag_ip }}
leaf_mlag_peer_ip: {{ leaf.mlag_peer_ip }}
leaf_mlag_peer_id: {{ leaf.mlag_peer_id }}
{% endif %}

{# routing protocol model multi-agent needed for EVPN address family #}
service_routing_protocols_model: multi-agent
ip_routing: true

{# Hardware Counter #}
### Hardware Counters
hardware_counters:
{% include 'base/hardware-counters.j2' %}

{# Daemon TerminAttr #}
### Daemon TerminAttr
daemon_terminattr:
{% include 'base/daemon-terminattr.j2' %}

{# vlan allocation policy #}
vlan_internal_order:
{% include 'base/vlan-internal-order.j2' %}


{# event monitor #}
### Event Monitor ###
event_monitor:
{% include 'base/event-monitor.j2' %}

{# event handler #}
### Event Handler ###
event_handlers:
{% include 'base/event-handler.j2' %}

{# load interval #}
### Load Interval ###
load_interval:
{% include 'base/load-interval.j2' %}

{# queue monitor length #}
### Queue Monitor Lenght ###
queue_monitor_length:
{% include 'base/queue-monitor-length.j2' %}

{# name servers #}
### Name Servers ###
name_server:
{% include 'base/name-servers.j2' %}

{# NTP servers #}
### NTP Servers ###
ntp_server:
{% include 'base/ntp-servers.j2' %}

{# redundancy #}
### Redundancy ###
redundancy:
{% include 'base/redundancy.j2' %}

{# spanning-tree #}
### Spanning-tree ###
spanning_tree:
{% include 'base/spanning-tree.j2' %}
{# disable mlag vlan spanning tree #}
{% include 'fabric/mlag/leaf-mlag-spanning-tree.j2' %}

{# unsupported transceiver #}
{% include 'base/unsupported-transeiver.j2' %}

{# aaa authorization #}
### AAA authorization ###
aaa_authorization:
{% include 'base/aaa-authorization.j2' %}

{# local users #}
### local users ###
local_users:
{% include 'base/local-users.j2' %}

{# clock timezone #}
### Clock Timezone ###
clock:
{% include 'base/clock-timezone.j2' %}

{# VLANs #}
### VLANs ###
vlans:
{# mlag VLANs #}
{% include 'fabric/mlag/leaf-mlag-vlans.j2' %}

{# L2leaf Inband Management VLAN #}
{% include 'l3leaf_l2leafs_uplinks/leaf-l2leaf-inband-management-vlan.j2' %}

{# Tenants L2 VLANs #}
{% include 'tenant_evpn_vxlan/leaf-tenant-vlans.j2' %}

{# VRFs #}
### VRFs ###
vrfs:
{# management #}
{% include 'base/mgmt-vrf.j2' %}

{# Tenant VRFS #}
{% include 'tenant_evpn_vxlan/leaf-tenant-vrfs.j2' %}

{# bfd multihop #}
### bfd multihop ###
bfd_multihop:
{% include 'base/bfd-multihop.j2' %}

{# Port-Channel Interfaces #}
### Port-Channel Interfaces ###
port_channel_interfaces:
{# L2 Leaf uplinks #}
{% include 'l3leaf_l2leafs_uplinks/l3leaf-port-channel-uplinks.j2' %}
{# mlag peer-link #}
{% include 'fabric/mlag/leaf-mlag-peer-link.j2' %}
{# Server - Port Channel Interfaces #}
{% include 'edge_ports/leaf-server-port-channels.j2' %}

{# Ethernet Interfaces #}
### Ethernet Interfaces ###
ethernet_interfaces:
{# Point-to-Point Interfaces to Spine Switches #}
{% include 'fabric/interfaces/leaf-p2p-interfaces.j2'%}
{# mlag interfaces #}
{% include 'fabric/mlag/leaf-mlag-interfaces.j2' %}
{# L2 Leaf uplinks #}
{% include 'l3leaf_l2leafs_uplinks/l3leaf-ethernet-uplinks.j2' %}
{# Server - Interfaces Configuration #}
{% include 'edge_ports/leaf-server-interfaces.j2' %}
{# Point-to-Point Interfaces to overlay-controller #}
{% include 'fabric/interfaces/switch-p2p-interfaces-overlay-controller.j2' %}
{# L3 Edge Point-to-Point Interfaces #}
{% include 'fabric/interfaces/switch-l3-edge-p2p-interfaces.j2' %}


{# loopback interfaces #}
### Loopback Interfaces ###
loopback_interfaces:
{# overlay peering interface #}
{% include 'fabric/interfaces/leaf-overlay-loopback.j2'%}
{# intentional blank line #}

{# VTEP VXLAN Tunnel Source #}
{% include 'fabric/interfaces/leaf-vtep-vxlan-tunnel-loopback.j2'%}
{# Tenant VRF Loopback - to allow VTEPs daignostics from switch #}
{% include 'tenant_evpn_vxlan/leaf-tenant-vrf-loopbacks.j2' %}

{# Management Interfaces #}
### Management Interfaces ###
management_interfaces:
{% include 'base/mgmt-interface.j2' %}

{# vlan interfaces #}
### VLAN Interfaces ###
vlan_interfaces:
{# mlag vlan interfaces #}
{% include 'fabric/mlag/leaf-mlag-vlan-interfaces.j2' %}
{# L2leaf Inband Management VLAN interfaces #}
{% include 'l3leaf_l2leafs_uplinks/leaf-l2leaf-inband-management-vlan-interfaces.j2' %}
{# Tenant vlan interfaces #}
{% include 'tenant_evpn_vxlan/leaf-tenant-vlan-interfaces.j2' %}

{# vxlan interface #}
### VxLAN interface ###
vxlan_tunnel_interface:
{% include 'tenant_evpn_vxlan/leaf-vxlan-vtep-interface.j2' %}

{# TCAM Profiles #}
### TCAM Profiles ###
tcam_profile:
{% include 'base/tcam-profile.j2' %}

{# Platform #}
### Platform ###
platform:
{% include 'base/platform.j2' %}

{# mac address-table #}
### MAC address table ###
mac_address_table:
{% include 'base/mac-address-table.j2' %}

{% if leaf.evpn_services_l2_only == false %}
{# virtual router mac address #}
ip_virtual_router_mac_address: {{ leaf.virtual_router_mac_address | lower }}
{% endif %}

{# Tenant - Virtual Source NAT - to allow VTEPs diagnostics from switch #}
virtual_source_nat_vrfs:
{% include 'tenant_evpn_vxlan/leaf-tenant-virtual-source-nat-vrfs.j2' %}

{# Tenant ip-igmp-snooping #}
ip_igmp_snooping:
{% include 'tenant_evpn_vxlan/leaf-tenant-igmp-snooping.j2' %}

{# static_routes #}
### static routes ###
static_routes:
{% include 'routing/static-routes.j2' %}

{# prefix_lists #}
### prefix-lists ###
prefix_lists:
{% include 'fabric/bgp_base/leaf-prefix-lists.j2' %}

{# MLAG Configuration #}
{% include 'fabric/mlag/leaf-mlag-configuration.j2' %}

{# route maps #}
### route-maps ###
route_maps:
{% include 'fabric/bgp_base/route-maps.j2' %}
{% include 'fabric/bgp_overlay/switch-route-maps-evpn.j2' %}

{# BGP Configuration #}
### Routing - BGP ###
router_bgp:
{# underlay and overlay #}
{% include 'fabric/bgp_base/switch-router-bgp-base.j2' %}
  peer_groups:
{% include 'fabric/bgp_base/leaf-router-bgp-peer-groups.j2' %}
{% include 'fabric/bgp_overlay/switch-router-bgp-peer-groups-evpn.j2' %}
  neighbors:
{% include 'fabric/bgp_base/leaf-router-bgp-neighbors.j2' %}
{% include 'fabric/bgp_overlay/switch-router-bgp-neighbors-evpn.j2' %}
{% include 'fabric/bgp_base/switch-router-bgp-neighbors-overlay-controllers.j2' %}
{% include 'fabric/ebgp_underlay/switch-l3-edge-router-bgp-neighbors.j2' %}
  redistribute_routes:
{% include 'fabric/ebgp_underlay/leaf-router-bgp-redistribute-routes.j2' %}
  address_family_evpn:
{% include 'fabric/bgp_overlay/switch-router-bgp-address-family-evpn.j2' %}
  address_family_ipv4:
{% include 'fabric/ebgp_underlay/leaf-router-bgp-address-family-ipv4.j2' %}
  address_family_rtc:
{% include 'fabric/bgp_overlay/switch-router-bgp-address-family-rtc.j2' %}
{# Tenant router bgp evpn #}
  vlan_aware_bundles:
{% include 'tenant_evpn_vxlan/leaf-tenant-router-bgp-evpn-vlan-aware-bundles.j2' %}
  vlans:
{% include 'tenant_evpn_vxlan/leaf-tenant-router-bgp-evpn-vlans.j2' %}
  vrfs:
{% include 'tenant_evpn_vxlan/leaf-tenant-router-bgp-evpn-vrfs.j2' %}

{# Extended Community Lists Configuration #}
### Extended Community Lists ###
ip_extcommunity_lists:
{% include 'fabric/bgp_base/ip-extcommunity-lists.j2' %}

{# OSPF Configuration #}
### Routing - OSPF ###
router_ospf:
{# underlay #}
{% include 'fabric/ospf_underlay/router-ospf.j2' %}

{# ISIS Configuration #}
### Routing - ISIS ###
router_isis:
{# underlay #}
{% include 'fabric/isis_underlay/router-isis.j2' %}

{# queue monitor streaming #}
### Queue Monitor Streaming ###
queue_monitor_streaming:
{% include 'base/queue-monitor-streaming.j2' %}

{# management api http #}
### Management API http ###
management_api_http:
{% include 'base/management-api-http.j2' %}
