{# Leaf tenant router bgp evpn VRFs #}
{% for tenant in tenants | arista.avd.natural_sort if ( tenant in leaf.filter_tenants or "all" in leaf.filter_tenants ) and leaf.evpn_services_l2_only == false %}
## {{ tenant }} ##
{%     if tenants[tenant].vrfs is defined %}
{%         for vrf in tenants[tenant].vrfs | arista.avd.natural_sort if leaf.vrfs is not none and vrf in leaf.vrfs %}
    {{ vrf }}:
      router_id: {{ overlay_loopback_network_summary | ipaddr('network') | ipmath(leaf.id + spine.nodes | length) }}
      rd: "{{ leaf.evpn_rd_admin_subfield }}:{{ tenants[tenant].vrfs[vrf].vrf_vni }}"
      route_targets:
        import:
          evpn:
            - "{{ leaf.evpn_rt_admin_subfield or tenants[tenant].vrfs[vrf].vrf_vni }}:{{ tenants[tenant].vrfs[vrf].vrf_vni }}"
        export:
          evpn:
            - "{{ leaf.evpn_rt_admin_subfield or tenants[tenant].vrfs[vrf].vrf_vni }}:{{ tenants[tenant].vrfs[vrf].vrf_vni }}"
{%             if leaf.mlag == true %}
{%                 set configure_mlag_ibgp_peering = true %}
{%                 if tenants[tenant].vrfs[vrf].enable_mlag_ibgp_peering_vrfs is defined and tenants[tenant].vrfs[vrf].enable_mlag_ibgp_peering_vrfs is not none %}
{%                     set configure_mlag_ibgp_peering = tenants[tenant].vrfs[vrf].enable_mlag_ibgp_peering_vrfs %}
{%                 elif tenants[tenant].enable_mlag_ibgp_peering_vrfs is defined and tenants[tenant].enable_mlag_ibgp_peering_vrfs is not none %}
{%                     set configure_mlag_ibgp_peering = tenants[tenant].enable_mlag_ibgp_peering_vrfs %}
{%                 endif %}
{%                 if configure_mlag_ibgp_peering %}
      neighbors:
        {{ mlag_ips.leaf_peer_l3 | ipaddr('network') | ipmath(leaf.mlag_peer_ip) }}:
          peer_group: MLAG-IPv4-UNDERLAY-PEER
{%                 elif configure_mlag_ibgp_peering == false and leaf.has_tenant_bgp_peers == true %}
      neighbors:
{%                 endif %}
{%             elif leaf.mlag == false and leaf.has_tenant_bgp_peers == true %}
      neighbors:
{%             endif %}
{%             if tenants[tenant].vrfs[vrf].bgp_peers is arista.avd.defined and leaf.has_tenant_bgp_peers == true %}
{%                 for bgp_peer in tenants[tenant].vrfs[vrf].bgp_peers %}
{%                     if tenants[tenant].vrfs[vrf].bgp_peers[bgp_peer].nodes is arista.avd.defined %}
{%                         if inventory_hostname in tenants[tenant].vrfs[vrf].bgp_peers[bgp_peer].nodes %}
{%                             set neighbor_params = tenants[tenant].vrfs[vrf].bgp_peers[bgp_peer] %}
{%                             if neighbor_params.address_family is not arista.avd.defined %}
{%                                 do neighbor_params.update({'address_family': ['ipv4']}) %}
{%                             endif %}
{%                             if neighbor_params.set_ipv4_next_hop is arista.avd.defined or neighbor_params.set_ipv6_next_hop is arista.avd.defined %}
{%                                 do neighbor_params.update({ 'route_map_out':'RM-' ~ vrf ~ '-' ~ bgp_peer ~ '-SET-NEXT-HOP-OUT' }) %}
{%                                 if neighbor_params.default_originate is arista.avd.defined %}
{%                                     if neighbor_params.default_originate.route_map is not arista.avd.defined %}
{%                                         do neighbor_params.default_originate.update({ 'route_map_out':'RM-' ~ vrf ~ '-' ~ bgp_peer ~ '-SET-NEXT-HOP-OUT' }) %}
{%                                     endif %}
{%                                 endif %}
{%                                 if neighbor_params.set_ipv4_next_hop is arista.avd.defined %}
{%                                     do neighbor_params.pop('set_ipv4_next_hop') %}
{%                                 endif %}
{%                                 if neighbor_params.set_ipv6_next_hop is arista.avd.defined %}
{%                                     do neighbor_params.pop('set_ipv6_next_hop') %}
{%                                 endif %}
{%                             endif%}
{%                             do neighbor_params.pop('nodes') %}
        {{ bgp_peer }}:
          {{ neighbor_params }}
{%                         endif %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
      redistribute_routes:
        - connected
{%             if tenants[tenant].vrfs[vrf].static_routes is arista.avd.defined %}
{%                 if tenants[tenant].vrfs[vrf].redistribute_static is not arista.avd.defined %}
{%                     for static_route in tenants[tenant].vrfs[vrf].static_routes %}
{%                         if static_route.nodes is not arista.avd.defined %}
        - static
{%                             break %}
{%                         elif inventory_hostname in static_route.nodes %}
        - static
{%                             break %}
{%                         endif %}
{%                     endfor %}
{%                 elif tenants[tenant].vrfs[vrf].redistribute_static == true %}
        - static
{%                 endif %}
{%             endif %}
{%         endfor %}
{%    endif %}
{% endfor %}
