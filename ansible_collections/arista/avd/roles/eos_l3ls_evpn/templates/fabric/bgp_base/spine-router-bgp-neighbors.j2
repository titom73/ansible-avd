{# Spine router bgp neighbors configuration #}
{% for l3leaf_node_group in l3leaf.node_groups | arista.avd.natural_sort %}
{%     if l3leaf.node_groups[l3leaf_node_group].spines is defined %}
{%         set leaf_spines = l3leaf.node_groups[l3leaf_node_group].spines %}
{%     else %}
{%         set leaf_spines = l3leaf.defaults.spines %}
{%     endif %}
{%     for node in l3leaf.node_groups[l3leaf_node_group].nodes | arista.avd.natural_sort %}
{# Underlay network peering #}
{%         if switch.underlay_routing_protocol == "ebgp" %}
{%             for leaf_spine in leaf_spines %}
{%                 if leaf_spine == inventory_hostname %}
    {{ underlay_p2p_network_summary | ipaddr('network') | ipmath(((l3leaf.node_groups[l3leaf_node_group].nodes[node].id -1) * 2 * spine.nodes | length * max_l3leaf_to_spine_links ) + loop.index0 * 2 + 1) }}:
      peer_group: IPv4-UNDERLAY-PEERS
      remote_as: {{ l3leaf.node_groups[l3leaf_node_group].nodes[node].bgp_as | arista.avd.default(
                    l3leaf.node_groups[l3leaf_node_group].bgp_as,
                    l3leaf.defaults.bgp_as) }}
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endfor %}
{% endfor %}
{# Underlay network peering to super spines #}
{% if spine.nodes[inventory_hostname]['uplinks_to_super_spine_interfaces'] is defined %}
{%     set spine_uplink_list = spine.nodes[inventory_hostname]['uplinks_to_super_spine_interfaces'] %}
{% elif spine.uplinks_to_super_spine_interfaces is defined %}
{%     set spine_uplink_list = spine.uplinks_to_super_spine_interfaces %}
{% else %}
{%     set spine_uplink_list = [] %}
{% endif %}
{% for spine_uplink in spine_uplink_list %}
{%     set s_spine_id = loop.index0 // max_spine_to_super_spine_links + 1 %}
{%     set spine_id = spine.nodes[inventory_hostname].id %}
{%     set ip_pool = super_spine_underlay_p2p_network_summary %}
{#     max number of hosts in subnet will be divided by max super-spine number to avoid address changes when provisioning new spines #}
{%     set ip_pool_max_hosts_in_subnet = ip_pool | ipaddr('size') %}
{%     set offset = loop.index0 % max_spine_to_super_spine_links %}
    {{
      ip_pool | ipaddr('network') | ipmath(
            (ip_pool_max_hosts_in_subnet / max_super_spines)|int * (s_spine_id-1) + ((spine_id-1) * max_spine_to_super_spine_links + offset) * 2
      )
    }}:
      peer_group: IPv4-UNDERLAY-PEERS
      remote_as: {{ super_spine.bgp_as }}
{% endfor %}
